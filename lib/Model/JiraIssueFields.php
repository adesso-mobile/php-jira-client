<?php
/**
 * JiraIssueFields
 *
 * PHP version 5
 *
 * @category Class
 * @package  JiraClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Jira Rest Resources
 *
 * This is the jira rest resources endpoint documentation
 *
 * The version of the OpenAPI document: 8.4.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JiraClient\Model;

use \ArrayAccess;
use \JiraClient\ObjectSerializer;

/**
 * JiraIssueFields Class Doc Comment
 *
 * @category Class
 * @package  JiraClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class JiraIssueFields implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JiraIssueFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'project' => '\JiraClient\Model\JiraIssueFieldsProject',
        'summary' => 'string',
        'issuetype' => '\JiraClient\Model\JiraIssueFieldsProject',
        'assignee' => '\JiraClient\Model\JiraIssueFieldsAssignee',
        'reporter' => '\JiraClient\Model\JiraIssueFieldsAssignee',
        'priority' => '\JiraClient\Model\JiraIssueFieldsProject',
        'labels' => 'string[]',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'project' => null,
        'summary' => null,
        'issuetype' => null,
        'assignee' => null,
        'reporter' => null,
        'priority' => null,
        'labels' => null,
        'description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project' => 'project',
        'summary' => 'summary',
        'issuetype' => 'issuetype',
        'assignee' => 'assignee',
        'reporter' => 'reporter',
        'priority' => 'priority',
        'labels' => 'labels',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project' => 'setProject',
        'summary' => 'setSummary',
        'issuetype' => 'setIssuetype',
        'assignee' => 'setAssignee',
        'reporter' => 'setReporter',
        'priority' => 'setPriority',
        'labels' => 'setLabels',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project' => 'getProject',
        'summary' => 'getSummary',
        'issuetype' => 'getIssuetype',
        'assignee' => 'getAssignee',
        'reporter' => 'getReporter',
        'priority' => 'getPriority',
        'labels' => 'getLabels',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['issuetype'] = isset($data['issuetype']) ? $data['issuetype'] : null;
        $this->container['assignee'] = isset($data['assignee']) ? $data['assignee'] : null;
        $this->container['reporter'] = isset($data['reporter']) ? $data['reporter'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets project
     *
     * @return \JiraClient\Model\JiraIssueFieldsProject|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \JiraClient\Model\JiraIssueFieldsProject|null $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets issuetype
     *
     * @return \JiraClient\Model\JiraIssueFieldsProject|null
     */
    public function getIssuetype()
    {
        return $this->container['issuetype'];
    }

    /**
     * Sets issuetype
     *
     * @param \JiraClient\Model\JiraIssueFieldsProject|null $issuetype issuetype
     *
     * @return $this
     */
    public function setIssuetype($issuetype)
    {
        $this->container['issuetype'] = $issuetype;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return \JiraClient\Model\JiraIssueFieldsAssignee|null
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \JiraClient\Model\JiraIssueFieldsAssignee|null $assignee assignee
     *
     * @return $this
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets reporter
     *
     * @return \JiraClient\Model\JiraIssueFieldsAssignee|null
     */
    public function getReporter()
    {
        return $this->container['reporter'];
    }

    /**
     * Sets reporter
     *
     * @param \JiraClient\Model\JiraIssueFieldsAssignee|null $reporter reporter
     *
     * @return $this
     */
    public function setReporter($reporter)
    {
        $this->container['reporter'] = $reporter;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return \JiraClient\Model\JiraIssueFieldsProject|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param \JiraClient\Model\JiraIssueFieldsProject|null $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


